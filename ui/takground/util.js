"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.moveTo = exports.keysToDir = exports.computeSquareCenter = exports.createEl = exports.isRightButton = exports.eventPosition = exports.setVisible = exports.translateRel = exports.translateAbs = exports.posToTranslateRel = exports.posToTranslateAbs = exports.samePiece = exports.distanceSq = exports.opposite = exports.timer = exports.memo = exports.allPos = exports.key2pos = exports.pos2key = exports.allKeys = exports.invRanks = void 0;
const cg = require("./types");
exports.invRanks = [...cg.ranks].reverse();
exports.allKeys = Array.prototype.concat(...cg.files.map(c => cg.ranks.map(r => c + r)));
const pos2key = (pos) => exports.allKeys[8 * pos[0] + pos[1]];
exports.pos2key = pos2key;
const key2pos = (k) => [k.charCodeAt(0) - 97, k.charCodeAt(1) - 49];
exports.key2pos = key2pos;
exports.allPos = exports.allKeys.map(exports.key2pos);
function memo(f) {
    let v;
    const ret = () => {
        if (v === undefined)
            v = f();
        return v;
    };
    ret.clear = () => {
        v = undefined;
    };
    return ret;
}
exports.memo = memo;
const timer = () => {
    let startAt;
    return {
        start() {
            startAt = performance.now();
        },
        cancel() {
            startAt = undefined;
        },
        stop() {
            if (!startAt)
                return 0;
            const time = performance.now() - startAt;
            startAt = undefined;
            return time;
        },
    };
};
exports.timer = timer;
const opposite = (c) => (c === 'white' ? 'black' : 'white');
exports.opposite = opposite;
const distanceSq = (pos1, pos2) => {
    const dx = pos1[0] - pos2[0], dy = pos1[1] - pos2[1];
    return dx * dx + dy * dy;
};
exports.distanceSq = distanceSq;
const samePiece = (p1, p2) => p1.role === p2.role && p1.color === p2.color;
exports.samePiece = samePiece;
const posToTranslateBase = (pos, asWhite, xFactor, yFactor, index) => [
    (asWhite ? pos[0] : 7 - pos[0]) * xFactor,
    (asWhite ? 7 - pos[1] : pos[1]) * yFactor + (index ? index + 1 : 0) * 5,
];
const posToTranslateAbs = (bounds) => {
    const xFactor = bounds.width / 8, yFactor = bounds.height / 8;
    return (pos, asWhite, index) => posToTranslateBase(pos, asWhite, xFactor, yFactor, index);
};
exports.posToTranslateAbs = posToTranslateAbs;
const posToTranslateRel = (pos, asWhite, index) => posToTranslateBase(pos, asWhite, 100, 100, index);
exports.posToTranslateRel = posToTranslateRel;
const translateAbs = (el, pos) => {
    el.style.transform = `translate(${pos[0]}px,${pos[1]}px)`;
};
exports.translateAbs = translateAbs;
const translateRel = (el, percents) => {
    el.style.transform = `translate(${percents[0]}%,${percents[1]}%)`;
};
exports.translateRel = translateRel;
const setVisible = (el, v) => {
    el.style.visibility = v ? 'visible' : 'hidden';
};
exports.setVisible = setVisible;
const eventPosition = (e) => {
    var _a;
    if (e.clientX || e.clientX === 0)
        return [e.clientX, e.clientY];
    if ((_a = e.targetTouches) === null || _a === void 0 ? void 0 : _a[0])
        return [e.targetTouches[0].clientX, e.targetTouches[0].clientY];
    return; // touchend has no position!
};
exports.eventPosition = eventPosition;
const isRightButton = (e) => e.buttons === 2 || e.button === 2;
exports.isRightButton = isRightButton;
const createEl = (tagName, className) => {
    const el = document.createElement(tagName);
    if (className)
        el.className = className;
    return el;
};
exports.createEl = createEl;
function computeSquareCenter(key, asWhite, bounds) {
    const pos = exports.key2pos(key);
    if (!asWhite) {
        pos[0] = 7 - pos[0];
        pos[1] = 7 - pos[1];
    }
    return [
        bounds.left + (bounds.width * pos[0]) / 8 + bounds.width / 16,
        bounds.top + (bounds.height * (7 - pos[1])) / 8 + bounds.height / 16,
    ];
}
exports.computeSquareCenter = computeSquareCenter;
function keysToDir(orig, dest) {
    const fdiff = orig.charCodeAt(0) - dest.charCodeAt(0);
    const rdiff = orig.charCodeAt(1) - dest.charCodeAt(1);
    if (fdiff === 0)
        return (rdiff > 0) ? '-' : '+';
    else
        return (fdiff > 0) ? '<' : '>';
}
exports.keysToDir = keysToDir;
function moveTo(orig, dir) {
    switch (dir) {
        case '+':
            let up = cg.ranks.findIndex(i => i == orig[1]) + 1;
            if (up < cg.ranks.length)
                return `${orig[0]}${cg.ranks[up]}`;
            else
                return undefined;
        case '-':
            let down = cg.ranks.findIndex(i => i == orig[1]) - 1;
            if (down >= 0)
                return `${orig[0]}${cg.ranks[down]}`;
            else
                return undefined;
        case '>':
            let right = cg.files.findIndex(i => i == orig[0]) + 1;
            if (right < cg.files.length)
                return `${cg.files[right]}${orig[1]}`;
            else
                return undefined;
        case '<':
            let left = cg.files.findIndex(i => i == orig[0]) - 1;
            if (left >= 0)
                return `${cg.files[left]}${orig[1]}`;
            else
                return undefined;
        default:
            return undefined;
    }
}
exports.moveTo = moveTo;
//# sourceMappingURL=data:application/json;base64,